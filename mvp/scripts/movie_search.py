#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Movie Search Script
------------------
This script allows users to search for movie information by title and displays detailed
information in Vietnamese. It uses TMDB API for movie data and translates results.
"""

import os
import sys
import requests
import json
from datetime import datetime
from googletrans import Translator

# API Configuration
TMDB_API_KEY = "12d8852faa36602d14b98d24eecc10de"  # Replace with your TMDB API key
TMDB_BASE_URL = "https://api.themoviedb.org/3"
TMDB_IMAGE_BASE_URL = "https://image.tmdb.org/t/p/w500"
LANGUAGE = "en-US"

# Initialize translator
translator = Translator()

def translate_to_vietnamese(text):
    """Translate text to Vietnamese."""
    if not text:
        return ""
    try:
        translation = translator.translate(text, dest="vi")
        return translation.text
    except Exception as e:
        print(f"Translation error: {e}")
        return text

def search_movie(query):
    """Search for movies by title."""
    url = f"{TMDB_BASE_URL}/search/movie"
    params = {
        "api_key": TMDB_API_KEY,
        "language": LANGUAGE,
        "query": query,
        "page": 1,
        "include_adult": False
    }
    
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json()["results"]
    except requests.exceptions.RequestException as e:
        print(f"Error searching for movie: {e}")
        return []

def get_movie_details(movie_id):
    """Get detailed information about a movie."""
    url = f"{TMDB_BASE_URL}/movie/{movie_id}"
    params = {
        "api_key": TMDB_API_KEY,
        "language": LANGUAGE,
        "append_to_response": "credits,reviews"
    }
    
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error getting movie details: {e}")
        return None

def get_movie_credits(movie_id):
    """Get cast and crew information for a movie."""
    url = f"{TMDB_BASE_URL}/movie/{movie_id}/credits"
    params = {
        "api_key": TMDB_API_KEY
    }
    
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error getting movie credits: {e}")
        return None

def format_date(date_str):
    """Format date string to Vietnamese format."""
    if not date_str:
        return "Kh√¥ng c√≥ th√¥ng tin"
    try:
        date_obj = datetime.strptime(date_str, "%Y-%m-%d")
        return date_obj.strftime("%d/%m/%Y")
    except ValueError:
        return date_str

def display_movie_info(movie):
    """Display formatted movie information in Vietnamese."""
    # Get full movie details
    movie_details = get_movie_details(movie["id"])
    if not movie_details:
        print("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin chi ti·∫øt c·ªßa phim.")
        return
    
    # Basic information
    title = movie_details.get("title", "Kh√¥ng c√≥ t√™n")
    original_title = movie_details.get("original_title", "")
    release_date = format_date(movie_details.get("release_date", ""))
    runtime = movie_details.get("runtime", 0)
    
    # Production companies
    production_companies = []
    for company in movie_details.get("production_companies", []):
        production_companies.append(company.get("name", ""))
    
    # Genres
    genres = []
    for genre in movie_details.get("genres", []):
        genres.append(genre.get("name", ""))
    
    # Overview/Plot
    overview = movie_details.get("overview", "Kh√¥ng c√≥ m√¥ t·∫£")
    
    # Ratings
    vote_average = movie_details.get("vote_average", 0)
    vote_count = movie_details.get("vote_count", 0)
    
    # Directors and top cast members
    directors = []
    cast = []
    credits = movie_details.get("credits", {})
    
    for crew_member in credits.get("crew", []):
        if crew_member.get("job") == "Director":
            directors.append(crew_member.get("name", ""))
    
    for cast_member in credits.get("cast", [])[:5]:  # Get top 5 cast members
        cast.append(cast_member.get("name", ""))
    
    # Translate information to Vietnamese
    title_vi = translate_to_vietnamese(title) if title != original_title else title
    original_title_vi = f" ({original_title})" if original_title and original_title != title else ""
    overview_vi = translate_to_vietnamese(overview)
    genres_vi = [translate_to_vietnamese(genre) for genre in genres]
    production_companies_vi = [translate_to_vietnamese(company) for company in production_companies]
    
    # Format and display information
    print("\n" + "=" * 50)
    print(f"üé¨ {title_vi}{original_title_vi}")
    print("=" * 50)
    
    print(f"\nüìÖ Ng√†y ph√°t h√†nh: {release_date}")
    if runtime:
        hours, minutes = divmod(runtime, 60)
        print(f"‚è±Ô∏è Th·ªùi l∆∞·ª£ng: {hours}h {minutes}m")
    
    print(f"\nüé≠ Th·ªÉ lo·∫°i: {', '.join(genres_vi)}")
    
    if directors:
        print(f"\nüé¨ ƒê·∫°o di·ªÖn: {', '.join(directors)}")
    
    if cast:
        print(f"\nüåü Di·ªÖn vi√™n ch√≠nh: {', '.join(cast)}")
    
    if production_companies_vi:
        print(f"\nüè¢ H√£ng s·∫£n xu·∫•t: {', '.join(production_companies_vi)}")
    
    print(f"\n‚≠ê ƒê√°nh gi√°: {vote_average}/10 (d·ª±a tr√™n {vote_count} l∆∞·ª£t ƒë√°nh gi√°)")
    
    print(f"\nüìù T√≥m t·∫Øt n·ªôi dung:\n{overview_vi}")
    
    # Display poster URL if available
    if movie_details.get("poster_path"):
        poster_url = f"{TMDB_IMAGE_BASE_URL}{movie_details['poster_path']}"
        print(f"\nüñºÔ∏è Poster: {poster_url}")
    
    print("\n" + "=" * 50)

def main():
    """Main function to run the movie search script."""
    print("\n=== T√åM KI·∫æM TH√îNG TIN PHIM ===\n")
    
    # Check if API key is set
    if TMDB_API_KEY == "YOUR_TMDB_API_KEY":
        print("L·ªói: Vui l√≤ng thi·∫øt l·∫≠p TMDB API KEY trong script.")
        print("B·∫°n c√≥ th·ªÉ ƒëƒÉng k√Ω API key t·∫°i: https://www.themoviedb.org/settings/api")
        sys.exit(1)
    
    while True:
        # Get movie title from user
        query = input("\nNh·∫≠p t√™n phim (ho·∫∑c 'q' ƒë·ªÉ tho√°t): ")
        
        if query.lower() in ['q', 'quit', 'exit']:
            print("\nC·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng t√¨m ki·∫øm phim. T·∫°m bi·ªát!")
            break
        
        if not query.strip():
            print("Vui l√≤ng nh·∫≠p t√™n phim.")
            continue
        
        print(f"\nƒêang t√¨m ki·∫øm phim '{query}'...")
        
        # Search for movies
        movies = search_movie(query)
        
        if not movies:
            print("Kh√¥ng t√¨m th·∫•y phim n√†o. Vui l√≤ng th·ª≠ l·∫°i v·ªõi t·ª´ kh√≥a kh√°c.")
            continue
        
        # Display search results
        print(f"\nT√¨m th·∫•y {len(movies)} k·∫øt qu·∫£:")
        for i, movie in enumerate(movies[:10], 1):  # Show max 10 results
            release_year = movie.get("release_date", "")[:4] if movie.get("release_date") else "N/A"
            print(f"{i}. {movie.get('title')} ({release_year})")
        
        # Let user select a movie
        while True:
            try:
                selection = input("\nCh·ªçn s·ªë ƒë·ªÉ xem chi ti·∫øt (ho·∫∑c 'b' ƒë·ªÉ quay l·∫°i): ")
                
                if selection.lower() == 'b':
                    break
                
                idx = int(selection) - 1
                if 0 <= idx < len(movies[:10]):
                    display_movie_info(movies[idx])
                    input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                    break
                else:
                    print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")
            except ValueError:
                print("Vui l√≤ng nh·∫≠p m·ªôt s·ªë h·ª£p l·ªá.")

if __name__ == "__main__":
    main() 